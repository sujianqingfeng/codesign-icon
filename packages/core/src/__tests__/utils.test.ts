import type { IconsItem } from '../types'
import { promises as fs } from 'fs'
import { describe, test, expect } from 'vitest'
import {
  createMaxIntervalFn,
  fetchCodesignIcons,
  fetchToken,
  generateKey,
  generateQrCode,
  parseIcons
} from '../utils'

describe('utils', () => {
  test('generateKey', () => {
    const key = generateKey()
    expect(key.length).toBe(16)
  })

  test.skip('parseIcons', () => {
    const icons: IconsItem[] = [
      // {
      //   name: 'uni-more',
      //   svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 25 24" class="1p6ls6n49__design-iconfont">\n  <path d="M3.10449 10.1208H6.86281V13.8792H3.10449V10.1208ZM10.6211 10.1208H14.3794V13.8792H10.6211V10.1208ZM21.8961 10.1208H18.1378V13.8792H21.8961V10.1208Z"></path>\n</svg>',
      //   class_name: 'uni-more'
      // },
      {
        name: '\u65fa\u98ce\u63a7',
        svg: '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 32 32" class="design-iconfont">\n  <path d="M6.82867 17.9751C6.20358 18.6545 5.42681 19.1347 4.49835 19.4156C4.48901 19.4186 4.47918 19.4196 4.46942 19.4186C4.45967 19.4176 4.4502 19.4146 4.44156 19.4099C4.43293 19.4051 4.42531 19.3987 4.41915 19.3909C4.41299 19.3832 4.40842 19.3743 4.40571 19.3647C3.24106 15.0441 2.07946 10.7198 0.920919 6.39172C0.693554 5.54266 0.51811 4.91215 0.394586 4.50018C0.392728 4.49383 0.392151 4.48717 0.39289 4.4806C0.393629 4.47402 0.395668 4.46766 0.398889 4.46188C0.402111 4.4561 0.406449 4.45102 0.411653 4.44694C0.416857 4.44285 0.422821 4.43984 0.4292 4.43808L15.3467 0.455465C15.3532 0.453744 15.36 0.453301 15.3666 0.454164C15.3733 0.455026 15.3797 0.457176 15.3854 0.460489C15.3912 0.463802 15.3962 0.468212 15.4003 0.473466C15.4043 0.478719 15.4072 0.484712 15.4088 0.491096C15.7163 1.71411 15.5954 2.88352 15.0464 3.9993C14.5482 5.01124 13.8254 5.77037 12.8779 6.27668C12.5203 6.46739 11.8806 6.68933 10.9589 6.94248C9.58589 7.31984 8.19896 7.69245 6.79813 8.0603C6.78595 8.0635 6.77453 8.06907 6.76451 8.07668C6.75449 8.0843 6.74607 8.09382 6.73973 8.10469C6.7334 8.11557 6.72927 8.12759 6.72758 8.14006C6.7259 8.15253 6.72669 8.16521 6.72992 8.17738C7.11338 9.60876 7.49345 11.0239 7.87013 12.4227C8.09886 13.2737 8.21932 13.911 8.23154 14.3346C8.27091 15.7015 7.80328 16.915 6.82867 17.9751Z" fill="#0DDBFF"></path>\n  <path d="M25.6054 18.3898C24.4916 17.4288 23.8812 16.216 23.7739 14.7513C23.7407 14.3013 23.7872 13.8357 23.9134 13.3545C24.3668 11.6232 24.8229 9.89284 25.2817 8.16351C25.2835 8.15711 25.2839 8.1504 25.2831 8.14379C25.2822 8.13718 25.28 8.13079 25.2766 8.12501C25.2731 8.11922 25.2686 8.11415 25.2632 8.1101C25.2578 8.10605 25.2516 8.10309 25.245 8.10141C24.0573 7.76952 22.8682 7.44375 21.6778 7.12408C20.507 6.80984 19.8537 6.62625 19.718 6.57331C18.5072 6.10433 17.6045 5.28209 17.01 4.10658C16.4446 2.9874 16.3038 1.78542 16.5875 0.50064C16.5894 0.492691 16.5929 0.485203 16.5977 0.47862C16.6026 0.472037 16.6087 0.466492 16.6157 0.462315C16.6227 0.458138 16.6305 0.455414 16.6386 0.454303C16.6467 0.453191 16.6549 0.453716 16.6628 0.455847L31.5681 4.4405C31.5816 4.44409 31.5931 4.45283 31.6001 4.46484C31.6072 4.47684 31.6092 4.49114 31.6058 4.50463L27.611 19.3784C27.6081 19.3886 27.6033 19.3981 27.5968 19.4064C27.5902 19.4148 27.5821 19.4217 27.5729 19.4268C27.5637 19.4319 27.5536 19.4352 27.5432 19.4363C27.5327 19.4374 27.5222 19.4364 27.5122 19.4333C26.8023 19.2223 26.1667 18.8744 25.6054 18.3898Z" fill="#0859F8"></path>\n  <path d="M18.2243 21.9945C18.7055 21.5167 19.1884 21.0413 19.673 20.5682C20.2506 20.0035 20.9082 19.5987 21.646 19.3537C22.2833 19.1426 22.9525 19.0639 23.6536 19.1175C24.8542 19.2091 25.9157 19.6842 26.838 20.5428C26.849 20.553 26.8555 20.5672 26.8563 20.5822C26.857 20.5971 26.852 20.6119 26.8421 20.6232C26.515 20.991 26.1794 21.3467 25.8353 21.6901C22.5463 24.9771 19.2505 28.2572 15.9479 31.5306C15.9431 31.5354 15.9374 31.5393 15.9311 31.542C15.9248 31.5446 15.9181 31.5461 15.9114 31.5462C15.9047 31.5463 15.8981 31.545 15.8919 31.5425C15.8858 31.54 15.8803 31.5363 15.8757 31.5316C12.3994 28.0702 8.92543 24.6072 5.45388 21.1424C5.28284 20.972 5.13998 20.8146 5.02528 20.67C5.00355 20.6426 4.99332 20.6079 4.99674 20.573C5.00015 20.538 5.01695 20.5057 5.0436 20.4827C5.72298 19.899 6.46039 19.4976 7.25583 19.2783C7.90534 19.0998 8.57759 19.0581 9.27258 19.1531C10.1854 19.278 11.0036 19.6187 11.7271 20.1752C11.8805 20.294 12.3712 20.762 13.1992 21.5791C14.0937 22.4635 14.9879 23.3482 15.8818 24.2332C15.8912 24.2427 15.9041 24.248 15.9176 24.248C15.9311 24.248 15.9442 24.2427 15.9541 24.2332C16.7135 23.4893 17.4703 22.7431 18.2243 21.9945Z" fill="#4C545C"></path>\n</svg>',
        class_name: 'wangfengqiang'
      }
    ]
    const data = parseIcons(icons, {
      prefix: 'base'
    })

    expect(data).toMatchInlineSnapshot(`
      {
        "icons": {
          "wangfengqiang": {
            "body": "<g fill="currentColor"><path fill="#0DDBFF" d="M6.829 17.975a5.1 5.1 0 01-2.33 1.44q-.015.006-.03.004a.07.07 0 01-.063-.054Q2.658 12.885.92 6.392.58 5.118.395 4.5a.05.05 0 01.034-.062L15.347.455a.05.05 0 01.053.018l.009.018q.46 1.835-.363 3.508-.746 1.518-2.168 2.278-.536.285-1.92.665-2.058.566-4.16 1.118a.096.096 0 00-.068.117q.575 2.148 1.14 4.246.344 1.275.362 1.912.058 2.05-1.403 3.64"/><path fill="#0859F8" d="M25.605 18.39q-1.67-1.441-1.831-3.639a4.3 4.3 0 01.14-1.396q.68-2.598 1.368-5.191a.05.05 0 00-.005-.039.05.05 0 00-.032-.024 365 365 0 00-3.567-.977q-1.756-.471-1.96-.55-1.815-.705-2.708-2.467-.848-1.68-.423-3.606a.06.06 0 01.029-.039.06.06 0 01.047-.006L31.568 4.44a.053.053 0 01.038.064L27.61 19.378a.08.08 0 01-.038.049.08.08 0 01-.06.006 5.1 5.1 0 01-1.908-1.043"/><path fill="#4C545C" d="M18.224 21.995q.722-.717 1.449-1.427a5.1 5.1 0 011.973-1.214 5.1 5.1 0 012.008-.236q1.8.136 3.184 1.425a.06.06 0 01.004.08q-.49.552-1.007 1.067a3373 3373 0 01-9.887 9.84.05.05 0 01-.037.016.05.05 0 01-.035-.014q-5.215-5.193-10.422-10.39a6 6 0 01-.429-.472.135.135 0 01.019-.187q1.018-.876 2.212-1.205a5 5 0 012.017-.125 5.1 5.1 0 012.454 1.022q.23.178 1.472 1.404l2.683 2.654a.05.05 0 00.036.015.05.05 0 00.036-.015q1.14-1.116 2.27-2.239"/></g>",
            "height": 32,
            "width": 32,
          },
        },
        "lastModified": 1715334931,
        "prefix": "base",
      }
    `)
  })

  test('save file', async () => {
    const text = await fs.readFile('icons.json', 'utf8')
    // const icons: IconsItem[] = [
    //   {
    //     name: '\u65fa\u98ce\u63a7',
    //     svg: '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 32 32" class="design-iconfont">\n  <path d="M6.82867 17.9751C6.20358 18.6545 5.42681 19.1347 4.49835 19.4156C4.48901 19.4186 4.47918 19.4196 4.46942 19.4186C4.45967 19.4176 4.4502 19.4146 4.44156 19.4099C4.43293 19.4051 4.42531 19.3987 4.41915 19.3909C4.41299 19.3832 4.40842 19.3743 4.40571 19.3647C3.24106 15.0441 2.07946 10.7198 0.920919 6.39172C0.693554 5.54266 0.51811 4.91215 0.394586 4.50018C0.392728 4.49383 0.392151 4.48717 0.39289 4.4806C0.393629 4.47402 0.395668 4.46766 0.398889 4.46188C0.402111 4.4561 0.406449 4.45102 0.411653 4.44694C0.416857 4.44285 0.422821 4.43984 0.4292 4.43808L15.3467 0.455465C15.3532 0.453744 15.36 0.453301 15.3666 0.454164C15.3733 0.455026 15.3797 0.457176 15.3854 0.460489C15.3912 0.463802 15.3962 0.468212 15.4003 0.473466C15.4043 0.478719 15.4072 0.484712 15.4088 0.491096C15.7163 1.71411 15.5954 2.88352 15.0464 3.9993C14.5482 5.01124 13.8254 5.77037 12.8779 6.27668C12.5203 6.46739 11.8806 6.68933 10.9589 6.94248C9.58589 7.31984 8.19896 7.69245 6.79813 8.0603C6.78595 8.0635 6.77453 8.06907 6.76451 8.07668C6.75449 8.0843 6.74607 8.09382 6.73973 8.10469C6.7334 8.11557 6.72927 8.12759 6.72758 8.14006C6.7259 8.15253 6.72669 8.16521 6.72992 8.17738C7.11338 9.60876 7.49345 11.0239 7.87013 12.4227C8.09886 13.2737 8.21932 13.911 8.23154 14.3346C8.27091 15.7015 7.80328 16.915 6.82867 17.9751Z" fill="#0DDBFF"></path>\n  <path d="M25.6054 18.3898C24.4916 17.4288 23.8812 16.216 23.7739 14.7513C23.7407 14.3013 23.7872 13.8357 23.9134 13.3545C24.3668 11.6232 24.8229 9.89284 25.2817 8.16351C25.2835 8.15711 25.2839 8.1504 25.2831 8.14379C25.2822 8.13718 25.28 8.13079 25.2766 8.12501C25.2731 8.11922 25.2686 8.11415 25.2632 8.1101C25.2578 8.10605 25.2516 8.10309 25.245 8.10141C24.0573 7.76952 22.8682 7.44375 21.6778 7.12408C20.507 6.80984 19.8537 6.62625 19.718 6.57331C18.5072 6.10433 17.6045 5.28209 17.01 4.10658C16.4446 2.9874 16.3038 1.78542 16.5875 0.50064C16.5894 0.492691 16.5929 0.485203 16.5977 0.47862C16.6026 0.472037 16.6087 0.466492 16.6157 0.462315C16.6227 0.458138 16.6305 0.455414 16.6386 0.454303C16.6467 0.453191 16.6549 0.453716 16.6628 0.455847L31.5681 4.4405C31.5816 4.44409 31.5931 4.45283 31.6001 4.46484C31.6072 4.47684 31.6092 4.49114 31.6058 4.50463L27.611 19.3784C27.6081 19.3886 27.6033 19.3981 27.5968 19.4064C27.5902 19.4148 27.5821 19.4217 27.5729 19.4268C27.5637 19.4319 27.5536 19.4352 27.5432 19.4363C27.5327 19.4374 27.5222 19.4364 27.5122 19.4333C26.8023 19.2223 26.1667 18.8744 25.6054 18.3898Z" fill="#0859F8"></path>\n  <path d="M18.2243 21.9945C18.7055 21.5167 19.1884 21.0413 19.673 20.5682C20.2506 20.0035 20.9082 19.5987 21.646 19.3537C22.2833 19.1426 22.9525 19.0639 23.6536 19.1175C24.8542 19.2091 25.9157 19.6842 26.838 20.5428C26.849 20.553 26.8555 20.5672 26.8563 20.5822C26.857 20.5971 26.852 20.6119 26.8421 20.6232C26.515 20.991 26.1794 21.3467 25.8353 21.6901C22.5463 24.9771 19.2505 28.2572 15.9479 31.5306C15.9431 31.5354 15.9374 31.5393 15.9311 31.542C15.9248 31.5446 15.9181 31.5461 15.9114 31.5462C15.9047 31.5463 15.8981 31.545 15.8919 31.5425C15.8858 31.54 15.8803 31.5363 15.8757 31.5316C12.3994 28.0702 8.92543 24.6072 5.45388 21.1424C5.28284 20.972 5.13998 20.8146 5.02528 20.67C5.00355 20.6426 4.99332 20.6079 4.99674 20.573C5.00015 20.538 5.01695 20.5057 5.0436 20.4827C5.72298 19.899 6.46039 19.4976 7.25583 19.2783C7.90534 19.0998 8.57759 19.0581 9.27258 19.1531C10.1854 19.278 11.0036 19.6187 11.7271 20.1752C11.8805 20.294 12.3712 20.762 13.1992 21.5791C14.0937 22.4635 14.9879 23.3482 15.8818 24.2332C15.8912 24.2427 15.9041 24.248 15.9176 24.248C15.9311 24.248 15.9442 24.2427 15.9541 24.2332C16.7135 23.4893 17.4703 22.7431 18.2243 21.9945Z" fill="#4C545C"></path>\n</svg>',
    //     class_name: 'wangfengqiang'
    //   }
    // ]
    const icons = JSON.parse(text)
    const data = parseIcons(icons, {
      prefix: 'base'
    })
    const exported = `${JSON.stringify(data, null, '\t')}\n`
    await fs.writeFile(`base.json`, exported, 'utf8')
  })

  test.skip('transform', async () => {
    const text = await fs.readFile('icons.json', 'utf8')
    const icons = JSON.parse(text)
    const d = icons.map((item) => ({
      name: item.name,
      svg: item.svg,
      class_name: item.class_name
    }))
    const exported = `${JSON.stringify(d, null, '\t')}\n`
    await fs.writeFile(`icons.json`, exported, 'utf8')
  })

  test.skip(
    'download icon json',
    async () => {
      const key = generateKey()
      const url = `https://codesign.qq.com/login/${key}`
      generateQrCode(url)

      const token = (await createMaxIntervalFn<string | null>({
        fn: async () => {
          console.log('fetching token...')
          return fetchToken(key)
        }
      })) as string

      console.log('token:', token)

      const icons = await fetchCodesignIcons({
        project_id: 'lnGaV96la6ZPqwd',
        team_id: 'qxWyZ1ybLDZmVXk',
        include: 'creator',
        per_page: 500,
        page: 1,
        Authorization: `Bearer ${token}`
      })

      const exported = `${JSON.stringify(icons.data, null, '\t')}\n`
      await fs.writeFile(`icons.json`, exported, 'utf8')
    },
    { timeout: 200000 }
  )
})
